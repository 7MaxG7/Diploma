//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Plugins/InputSystem/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Mission"",
            ""id"": ""88a6ccd1-a7b6-4d32-8abf-25438ba7fbc5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""92e97a38-51e8-42c5-8a79-2e03a27a2703"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CompassButton"",
                    ""type"": ""Button"",
                    ""id"": ""05a1323a-04a0-401e-8cf5-cfe5ab692adb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""94de3947-a4f9-464e-8288-04ddbcddf8a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""63843434-11ca-4784-92a3-858f78e92574"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""65c0a7f4-5d34-49be-97a7-a045fdd082d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ab60b72-eee8-4c29-9eda-100e9bf80375"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b0b6621f-25f9-4427-a54e-047200829e05"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5b4f22b7-2b13-4051-98a1-1d15dd65a273"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompassButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mission
        m_Mission = asset.FindActionMap("Mission", throwIfNotFound: true);
        m_Mission_Move = m_Mission.FindAction("Move", throwIfNotFound: true);
        m_Mission_CompassButton = m_Mission.FindAction("CompassButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mission
    private readonly InputActionMap m_Mission;
    private IMissionActions m_MissionActionsCallbackInterface;
    private readonly InputAction m_Mission_Move;
    private readonly InputAction m_Mission_CompassButton;
    public struct MissionActions
    {
        private @InputControls m_Wrapper;
        public MissionActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Mission_Move;
        public InputAction @CompassButton => m_Wrapper.m_Mission_CompassButton;
        public InputActionMap Get() { return m_Wrapper.m_Mission; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MissionActions set) { return set.Get(); }
        public void SetCallbacks(IMissionActions instance)
        {
            if (m_Wrapper.m_MissionActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MissionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MissionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MissionActionsCallbackInterface.OnMove;
                @CompassButton.started -= m_Wrapper.m_MissionActionsCallbackInterface.OnCompassButton;
                @CompassButton.performed -= m_Wrapper.m_MissionActionsCallbackInterface.OnCompassButton;
                @CompassButton.canceled -= m_Wrapper.m_MissionActionsCallbackInterface.OnCompassButton;
            }
            m_Wrapper.m_MissionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @CompassButton.started += instance.OnCompassButton;
                @CompassButton.performed += instance.OnCompassButton;
                @CompassButton.canceled += instance.OnCompassButton;
            }
        }
    }
    public MissionActions @Mission => new MissionActions(this);
    public interface IMissionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCompassButton(InputAction.CallbackContext context);
    }
}
